import pandas as pd
import numpy as np
#import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Dense, Dropout, Flatten

X_train = np.load('../data/modeling/X_train.npy') 
X_test = np.load('../data/modeling/X_test.npy')
y_train = np.load('../data/modeling/y_train.npy')
y_test = np.load('../data/modeling/y_test.npy')

X_train = np.swapaxes(X_train, -1, 1)
X_test = np.swapaxes(X_test, -1, 1)

model = Sequential()
model.add(Conv2D(128, kernel_size=(10,3), activation='relu', input_shape=[100,4,7], padding='same'))
model.add(Dropout(0.25))
model.add(MaxPooling2D(pool_size=(3,1)))
model.add(Conv2D(128, (10,1), activation='relu', padding='same'))
model.add(Dropout(0.25))
model.add(MaxPooling2D(pool_size=(3,1)))
model.add(Conv2D(256, (5,1), activation='relu', padding='same'))
model.add(Dropout(0.25))
model.add(keras.layers.GlobalAveragePooling2D())
model.add(Dropout(0.25))
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(1, activation='sigmoid'))

print(model.summary())

model.compile(loss=keras.losses.binary_crossentropy, optimizer=keras.optimizers.legacy.Adam(), metrics='accuracy')

model.fit(X_train, y_train, batch_size=256, epochs=50, verbose=1, validation_data=(X_test, y_test))